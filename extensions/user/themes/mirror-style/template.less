.CodeMirror {
    .documentBackground();
    .documentFontColor();
    background: @backgroundColor;
    color: @fontColor;
}

.CodeMirror-gutters {
    background-color: @guttersBackground;
    border-right: 0;
}

.CodeMirror-focused .CodeMirror-linenumber,
.CodeMirror-linenumber {
    color: @linenumberColor;
    border-right: 0;
}

.cm-keyword {
    color: @keywordColor;
}

.cm-number {
    color: @numberColor;
}

.cm-variable {
    color: @variableColor;
}

.cm-variable-2 {
    color: @variable2Color;
}

.cm-variable-3 {
    color: @variable3Color;
}

.cm-property {
    color: @propertyColor;
}

.cm-operator {
    color: @operatorColor;
}

.cm-atom {
    color: @atomColor;
}

.cm-comment {
    color: @commentColor;
    background: @commentBackground;
}

.cm-string {
    color: @stringColor;
}

.cm-string-2 {
    color: @string2Color;
}

.cm-def {
    color: @definitionColor;
}

.cm-meta {
    color: @metaColor;
}

.cm-qualifier {
    color: @qualifierColor;
}

.cm-tag {
    color: @tagColor;
}

.cm-builtin {
    color: @builtingColor;
}

.cm-attribute {
    color: @attributeColor;
}

.cm-link {
    color: @linkColor;
}


.doctype-css {
    //@cssCommentColor:       <%= CSSComment.color %>;
    //@cssCommentBackground:  <%= CSSComment.background %>;
    //@cssKeywordColor:       <%= CSSKeyword.color %>;
    //@cssPropertyColor:      <%= CSSPropertyName.color %>;
    //@cssAtomColor:          <%= CSSPropertyValue.color %>;
    //@cssQualifierColor:     <%= CSSSelector.color %>;
    //@cssStringColor:        <%= CSSStringValue.color %>;
    //@cssNumberColor:        <%= CSSStringValue.color %>;
    //@cssMetaColor:          <%= CSSSelector.color %>;
    //@cssTagColor:           <%= CSSSelector.color %>;


    .cm-keyword {
        color: @cssKeywordColor;
    }

    .cm-number {
        color: @cssNumberColor;
    }

    .cm-property {
        color: @cssPropertyColor;
    }

    .cm-atom {
        color: @cssAtomColor;
    }

    .cm-comment {
        color: @cssCommentColor;
        background: @cssCommentBackground;
    }

    .cm-string {
        color: @cssStringColor;
    }

    .cm-meta {
        color: @cssMetaColor;
    }

    .cm-qualifier {
        color: @cssQualifierColor;
    }

    .cm-tag {
        color: @cssTagColor;
    }
}

.doctype-less:extend(.doctype-css all) {
}

.doctype-html {
    // HTML definitions
    //
    //@htmlAttributeColor:          <%= HTMLAttribute.color %>;
    //@htmlAttributeValueColor:     <%= HTMLAttributeValue.color %>;
    //@htmlCommentColor:            <%= HTMLComment.color %>;
    //@htmlCommentBackground:       <%= HTMLComment.background %>;
    //@htmlElementNameColor:        <%= HTMLElementName.color %>;
    //@htmlEntityColor:             <%= HTMLEntity.color %>;
    //@htmlOperatorColor:           <%= HTMLOperator.color %>;
    //@htmlOperatorBackground:      <%= HTMLOperator.background %>;
    //@htmlTagDelimiterColor:       <%= HTMLTagDelimeter.color %>;

    .cm-tag {
        color: @htmlElementNameColor;
    }

    .cm-comment {
        color: @htmlCommentColor;
        background-color: @htmlCommentBackground;
    }

    .cm-bracket {
        color: @htmlTagDelimiterColor;
    }

    .cm-string {
        color: @htmlAttributeValueColor;
    }

    .cm-attribute {
        color: @htmlAttributeColor;
    }
}

.doctype-htmlmixed:extend(.doctype-html all) {
}

.CodeMirror-selected {
    background: @selectedTextBackground !important;
    opacity: @selectedTextOpacity;
}

.cm-matchhighlight {
    background: @matchHightlightBackground;
    color: @matchHightlightColor !important;
    border-radius: 0px;
}

.CodeMirror-matchingtag {
    .documentBackground();
    background-color: darken(@backgroundColor, 10%) !important;
}

.CodeMirror-searching {
    background: #4bd278;
    color: #2c2c2c !important;
    border-radius: 0px;
}

.cm-matchhighlight.CodeMirror-searching.CodeMirror-selectedtext {
    background: #dd8440;
    color: #2c2c2c !important;
    border-radius: 0px;
}

.CodeMirror-matchingbracket {
    color: @matchingBracketColor !important;
    background: transparent;
    font-weight: bold;
    backface-visibility: hidden;
}

.CodeMirror-nonmatchingbracket {
    color: @nonmatchingBracketColor !important;
    backface-visibility: hidden;
}

.CodeMirror-cursor,
.CodeMirror-secondarycursor {
    .documentBackground();
    border-left: 1px solid contrast(@backgroundColor) !important;
}

#status-bar {
    .documentBackground();
    .documentFontColor();

    background: @backgroundColor;

    #status-info {
        color: lighten(@fontColor, 10%);
    }

    #status-indicators {
        background: @backgroundColor;
        color: @fontColor;
    }

    #status-overwrite {
        background: @backgroundColor;
        color: @fontColor;
    }

    #status-language {
    }

    #status-indent {
    }
}

#context-menu-bar {
    .dropdown-menu a {
        color: #3c3f41
    }

    .dropdown-menu a:hover {
        background: #f8cb4f
    }
}

.inline-widget .CodeMirror-gutter {
    background: #242424 !important;

    .color-editor ul.swatches li span.value {
        color: #525252
    }
}

.inline-editor-header {
    box-shadow: inset 0 0 5px #1f1f1f;
    background: #242424;
    height: 30px;
    width: 100%;

    a.filename span.line-number {
        color: #e0e0e0 !important;
    }

    a.filename {
        color: #f8cb4f !important;
    }
}
